/*
Print functions using pixel display by Tape
Font taken from https://github.com/dhepper/font8x8/blob/master/font8x8_basic.h

Usage: to print a character, put the ascii value for that character into .print_char, then call .print
       to print a number, put the number in .print_val_input, then call either .print_int, .print_uint, .print_hex, or .print_bin, depending on what type of value the number is.
       to print a number with a custom base, put the number in .print_val_input, put the base in .print_val_base, then call .print_val
       NOTE: THIS HAS NOT BEEN TESTED WITH BASE = 1. USING BASE = 1 WILL MOST LIKELY PUT THE PROCCESSOR IN AN INFINITE LOOP.

Notes: this will be updated to support fixed/floating point values in the near future, along with support for most/all ascii control characters.
*/


MINHEAP 4096 // these values are not accurate and you can probably get away with less
BITS == 16

JMP .setup

.print_charTable // this is the font, please don't modify this unless you want to put a new font in here
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x18 0x3C 0x3C 0x18 0x18 0x00 0x18 0x00]
DW [0x36 0x36 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x36 0x36 0x7F 0x36 0x7F 0x36 0x36 0x00]
DW [0x0C 0x3E 0x03 0x1E 0x30 0x1F 0x0C 0x00]
DW [0x00 0x63 0x33 0x18 0x0C 0x66 0x63 0x00]
DW [0x1C 0x36 0x1C 0x6E 0x3B 0x33 0x6E 0x00]
DW [0x06 0x06 0x03 0x00 0x00 0x00 0x00 0x00]
DW [0x18 0x0C 0x06 0x06 0x06 0x0C 0x18 0x00]
DW [0x06 0x0C 0x18 0x18 0x18 0x0C 0x06 0x00]
DW [0x00 0x66 0x3C 0xFF 0x3C 0x66 0x00 0x00]
DW [0x00 0x0C 0x0C 0x3F 0x0C 0x0C 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x0C 0x0C 0x06]
DW [0x00 0x00 0x00 0x3F 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x0C 0x0C 0x00]
DW [0x60 0x30 0x18 0x0C 0x06 0x03 0x01 0x00]
DW [0x3E 0x63 0x73 0x7B 0x6F 0x67 0x3E 0x00]
DW [0x0C 0x0E 0x0C 0x0C 0x0C 0x0C 0x3F 0x00]
DW [0x1E 0x33 0x30 0x1C 0x06 0x33 0x3F 0x00]
DW [0x1E 0x33 0x30 0x1C 0x30 0x33 0x1E 0x00]
DW [0x38 0x3C 0x36 0x33 0x7F 0x30 0x78 0x00]
DW [0x3F 0x03 0x1F 0x30 0x30 0x33 0x1E 0x00]
DW [0x1C 0x06 0x03 0x1F 0x33 0x33 0x1E 0x00]
DW [0x3F 0x33 0x30 0x18 0x0C 0x0C 0x0C 0x00]
DW [0x1E 0x33 0x33 0x1E 0x33 0x33 0x1E 0x00]
DW [0x1E 0x33 0x33 0x3E 0x30 0x18 0x0E 0x00]
DW [0x00 0x0C 0x0C 0x00 0x00 0x0C 0x0C 0x00]
DW [0x00 0x0C 0x0C 0x00 0x00 0x0C 0x0C 0x06]
DW [0x18 0x0C 0x06 0x03 0x06 0x0C 0x18 0x00]
DW [0x00 0x00 0x3F 0x00 0x00 0x3F 0x00 0x00]
DW [0x06 0x0C 0x18 0x30 0x18 0x0C 0x06 0x00]
DW [0x1E 0x33 0x30 0x18 0x0C 0x00 0x0C 0x00]
DW [0x3E 0x63 0x7B 0x7B 0x7B 0x03 0x1E 0x00]
DW [0x0C 0x1E 0x33 0x33 0x3F 0x33 0x33 0x00]
DW [0x3F 0x66 0x66 0x3E 0x66 0x66 0x3F 0x00]
DW [0x3C 0x66 0x03 0x03 0x03 0x66 0x3C 0x00]
DW [0x1F 0x36 0x66 0x66 0x66 0x36 0x1F 0x00]
DW [0x7F 0x46 0x16 0x1E 0x16 0x46 0x7F 0x00]
DW [0x7F 0x46 0x16 0x1E 0x16 0x06 0x0F 0x00]
DW [0x3C 0x66 0x03 0x03 0x73 0x66 0x7C 0x00]
DW [0x33 0x33 0x33 0x3F 0x33 0x33 0x33 0x00]
DW [0x1E 0x0C 0x0C 0x0C 0x0C 0x0C 0x1E 0x00]
DW [0x78 0x30 0x30 0x30 0x33 0x33 0x1E 0x00]
DW [0x67 0x66 0x36 0x1E 0x36 0x66 0x67 0x00]
DW [0x0F 0x06 0x06 0x06 0x46 0x66 0x7F 0x00]
DW [0x63 0x77 0x7F 0x7F 0x6B 0x63 0x63 0x00]
DW [0x63 0x67 0x6F 0x7B 0x73 0x63 0x63 0x00]
DW [0x1C 0x36 0x63 0x63 0x63 0x36 0x1C 0x00]
DW [0x3F 0x66 0x66 0x3E 0x06 0x06 0x0F 0x00]
DW [0x1E 0x33 0x33 0x33 0x3B 0x1E 0x38 0x00]
DW [0x3F 0x66 0x66 0x3E 0x36 0x66 0x67 0x00]
DW [0x1E 0x33 0x07 0x0E 0x38 0x33 0x1E 0x00]
DW [0x3F 0x2D 0x0C 0x0C 0x0C 0x0C 0x1E 0x00]
DW [0x33 0x33 0x33 0x33 0x33 0x33 0x3F 0x00]
DW [0x33 0x33 0x33 0x33 0x33 0x1E 0x0C 0x00]
DW [0x63 0x63 0x63 0x6B 0x7F 0x77 0x63 0x00]
DW [0x63 0x63 0x36 0x1C 0x1C 0x36 0x63 0x00]
DW [0x33 0x33 0x33 0x1E 0x0C 0x0C 0x1E 0x00]
DW [0x7F 0x63 0x31 0x18 0x4C 0x66 0x7F 0x00]
DW [0x1E 0x06 0x06 0x06 0x06 0x06 0x1E 0x00]
DW [0x03 0x06 0x0C 0x18 0x30 0x60 0x40 0x00]
DW [0x1E 0x18 0x18 0x18 0x18 0x18 0x1E 0x00]
DW [0x08 0x1C 0x36 0x63 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFF]
DW [0x0C 0x0C 0x18 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x1E 0x30 0x3E 0x33 0x6E 0x00]
DW [0x07 0x06 0x06 0x3E 0x66 0x66 0x3B 0x00]
DW [0x00 0x00 0x1E 0x33 0x03 0x33 0x1E 0x00]
DW [0x38 0x30 0x30 0x3e 0x33 0x33 0x6E 0x00]
DW [0x00 0x00 0x1E 0x33 0x3f 0x03 0x1E 0x00]
DW [0x1C 0x36 0x06 0x0f 0x06 0x06 0x0F 0x00]
DW [0x00 0x00 0x6E 0x33 0x33 0x3E 0x30 0x1F]
DW [0x07 0x06 0x36 0x6E 0x66 0x66 0x67 0x00]
DW [0x0C 0x00 0x0E 0x0C 0x0C 0x0C 0x1E 0x00]
DW [0x30 0x00 0x30 0x30 0x30 0x33 0x33 0x1E]
DW [0x07 0x06 0x66 0x36 0x1E 0x36 0x67 0x00]
DW [0x0E 0x0C 0x0C 0x0C 0x0C 0x0C 0x1E 0x00]
DW [0x00 0x00 0x33 0x7F 0x7F 0x6B 0x63 0x00]
DW [0x00 0x00 0x1F 0x33 0x33 0x33 0x33 0x00]
DW [0x00 0x00 0x1E 0x33 0x33 0x33 0x1E 0x00]
DW [0x00 0x00 0x3B 0x66 0x66 0x3E 0x06 0x0F]
DW [0x00 0x00 0x6E 0x33 0x33 0x3E 0x30 0x78]
DW [0x00 0x00 0x3B 0x6E 0x66 0x06 0x0F 0x00]
DW [0x00 0x00 0x3E 0x03 0x1E 0x30 0x1F 0x00]
DW [0x08 0x0C 0x3E 0x0C 0x0C 0x2C 0x18 0x00]
DW [0x00 0x00 0x33 0x33 0x33 0x33 0x6E 0x00]
DW [0x00 0x00 0x33 0x33 0x33 0x1E 0x0C 0x00]
DW [0x00 0x00 0x63 0x6B 0x7F 0x7F 0x36 0x00]
DW [0x00 0x00 0x63 0x36 0x1C 0x36 0x63 0x00]
DW [0x00 0x00 0x33 0x33 0x33 0x3E 0x30 0x1F]
DW [0x00 0x00 0x3F 0x19 0x0C 0x26 0x3F 0x00]
DW [0x38 0x0C 0x0C 0x07 0x0C 0x0C 0x38 0x00]
DW [0x18 0x18 0x18 0x00 0x18 0x18 0x18 0x00]
DW [0x07 0x0C 0x0C 0x38 0x0C 0x0C 0x07 0x00]
DW [0x6E 0x3B 0x00 0x00 0x00 0x00 0x00 0x00]
DW [0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00]
DW 0x69

.print_char   // character to print
DW 0
.print_x      // column number
DW 0
.print_y      // row number
DW 0
.print_cols   // how many columns of text are there
DW 0
.print_rows   // how many rows of text are there
DW 0
.print_text_col
DW 0x01
.print_bg_col
DW 0x00
.print_val_input  // input for val -> ascii
DW 0    
.print_val_base   // baase to use for val -> ascii, default 10
DW 10
.print_val_nums
DW [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] // make this have a length of @BITS)

.setup
IN R1 %X
IN R2 %Y
BSR R1 R1 3
BSR R2 R2 3
STR .print_cols R1
STR .print_rows R2
OUT %BUFFER 1
MOV R1 R0
MOV R2 R0
JMP .code

.print
// save registers
PSH R1
PSH R2
PSH R3
PSH R4
PSH R5
PSH R6
PSH R7
IMM R1 1
OUT %BUFFER 1
LOD R1 .print_char
BRE .print_newline R1 0x0A
BRZ .print_null R1 
BSL R2 R1 3
ADD R2 R2 .print_charTable
IMM R1 0 // r1 will be loop counter
.print_loop
    LLOD R3 R2 R1
    // print line
    MOV R4 R0 // loop counter #2
    .print_loop1
        INC R8 R8
        AND R5 R3 1
        LOD R6 .print_x
        BSL R6 R6 3
        ADD R6 R6 R4
        LOD R7 .print_y
        BSL R7 R7 3
        ADD R7 R7 R1
        OUT %X R6
        OUT %Y R7
        BRZ ~3 R5
        LOD R5 .print_text_col
        JMP ~2
        LOD R5 .print_bg_col 

        OUT %COLOR R5
        INC R4 R4
        RSH R3 R3
        BRL .print_loop1 R4 8
    INC R1 R1
    BRL .print_loop R1 7
LOD R1 .print_x
LOD R3 .print_y
INC R1 R1
LOD R2 .print_cols
BRL .print_skip R1 R2
MOV R1 R0
LOD R2 .print_rows
INC R3 R3
BRL .print_skip R3 R2
MOV R3 R0
HLT
.print_skip
STR .print_x R1
STR .print_y R3
JMP .print_ret
.print_null
JMP .print_ret
.print_newline
LOD R1 .print_y
LOD R3 .print_rows
INC R1 R1
BRL ~3 R1 R3
MOV R1 R0
HLT
STR .print_y R1
STR .print_x R0
.print_ret
// restore registers
POP R7
POP R6
POP R5
POP R4
POP R3
POP R2
POP R1
RET

.print_val
// save regs
PSH R1
PSH R2
PSH R3
PSH R4 
IMM R4 -1
LOD R1 .print_val_input
LOD R2 .print_val_base
.print_val_loop
INC R4 R4
MOD R3 R1 R2
DIV R1 R1 R2
LSTR .print_val_nums R4 R3
BNZ .print_val_loop R1
.print_val_loop1
LLOD R3 .print_val_nums R4
BRG ~3 R3 9 // if r3 > 9 r3 must be converted to a letter
ADD R3 R3 0x30 // ascii number offset
JMP ~2
ADD R3 R3 0x37
STR .print_char R3
CAL .print
DEC R4 R4
BRP .print_val_loop1 R4
// restore regs
POP R4
POP R3
POP R2
POP R1
RET

.print_int
PSH R1
STR .print_val_base 10
LOD R1 .print_val_input
BRP .print_int_skip R1
SUB R1 R0 R1
STR .print_val_input R1
STR .print_char '-'
CAL .print
.print_int_skip
CAL .print_val
POP R1
STR .print_char 0x0A
CAL .print
RET

.print_uint
STR .print_val_base 10
CAL .print_val
STR .print_char 0x0A
CAL .print
RET

.print_bin
STR .print_char '0'
CAL .print
STR .print_char 'b'
CAL .print
STR .print_val_base 2
CAL .print_val
STR .print_char 0x0A
CAL .print
RET

.print_hex
STR .print_char '0'
CAL .print
STR .print_char 'x'
CAL .print
STR .print_val_base 16
CAL .print_val
STR .print_char 0x0A
CAL .print
RET

.code
STR .print_val_input 825
CAL .print_uint
OUT %BUFFER 2
HLT
